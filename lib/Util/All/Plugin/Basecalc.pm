package Util::All::Plugin::Basecalc;

use warnings;
use strict;

sub utils {
  {
  '-basecalc' => [
    [
      'Math::BaseCalc',
      '',
      {
        'to_base' => sub {
            my($pkg, $class, $func, $args, $kind_args) = @_;
            sub {
                'Math::BaseCalc'->new('digits', $$args{'digits'} || $$kind_args{'digits'})->to_base(shift @_);
            }
            ;
        },
        '-select' => [],
        'from_base' => sub {
            my($pkg, $class, $func, $args, $kind_args) = @_;
            sub {
                'Math::BaseCalc'->new('digits', $$args{'digits'} || $$kind_args{'digits'})->from_base(shift @_);
            }
            ;
        }
      }
    ],
    [
      'Toolbox::Simple',
      '',
      {
        '-select' => [
          'dec2hex',
          'hex2dec',
          'dec2bin',
          'dec2oct',
          'oct2dec'
        ]
      }
    ]
  ]
}
;
}

=head1 NAME

Util::All::Plugin::Basecalc; -  Util::All plugin for Basecalc

=cut

=head1 EXPORT

functions which C<*> follows are generated by the way like Sub::Exporter.
see L<Util::Any/"USE Sub::Exporter's GENERATOR WAY">

=head2 -basecalc

=head3 from_base / to_base

  use Util::All -basecalc => [-args => {digits => [0,1]}];
  to_base(4);     # 100
  from_base(100); # 4


=head3 test code

 package test_basecalc1;
 use Util::All -basecalc => [-args => {digits => [0,1]}];
 (to_base(4), from_base(100));
 # equal to: 100, 4

 package test_basecalc2;
 use Util::All -basecalc => [to_base => {digits => [0,1], -as => 'to_base2'}];
 to_base2(4);
 # equal to: 100

 package test_basecalc3;
 use Util::All -basecalc => [from_base => {digits => [0,1], -as => 'from_base2'}];
 from_base2(100);
 # equal to: 4



=head1 AUTHOR

Ktat, C<< <ktat at cpan.org> >>

=head1 REPOSITORY

Util::All is hosted at github.

L<http://github.com/ktat/Util-All>

=head1 SUPPORT

You can find documentation for this module with the perldoc command.

 perldoc Util::All::Basecalc

=head1 SEE ALSO

=over 4

=item L<Util::All>

collect perl utilities and group them by appropriate kind.

=item L<Util::Any>

This module is based on Util::Any.
Util::Any helps you to create your own utility module.

=back

=head1 COPYRIGHT & LICENSE

Copyright 2009-2010 Ktat, all rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

1;