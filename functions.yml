---
scalar:
  Scalar::Util: *

list:
  List::Util: *
  List::MoreUtils: *

hash:
  Hash::Util: *

debug:
  Data::Dumper:
    Dumper: dumper
  Data::Dump:
    - dump

string:
  String::Util: *
  String::CamelCase: *

md5:
  Digest::MD5: *

sha:
  Digest::SHA: *

utf8:
  utf8:
    is_utf8  : is_utf8
    upgrade  : utf8_upgrade
    downgrade: utf8_downgrade
    encode   : utf8_encode

cgi:
  CGI:
    escape: cgi_escape
    unescape: cgi_unescape

char_enc:
  Encode:
    encode : char_encode
    decode : char_decode
    from_to: char_convert

uri:
  URI::Escape:
    - uri_escape
    - uri_unescape
  URI::Split:
    - uri_split
    - uri_join

base64:
  MIME::Base64:
    encode_base64: base64_encode
    decode_base64: base64_decode

http:
  HTTP::Request::Common:
    GET:    http_get
    POST:   http_post
    PUT:    http_put
    DELETE: http_delete
    HEAD:   http_head

mail:
  Mail::Sendmail:
    sendmail: mail_send

carp:
  Carp: *

yaml:
  YAML::Syck:
    LoadFile: yaml_load_file
    Load:     yaml_load
    DumpFile: yaml_dump_file
    Dump:     yaml_dump

json:
  JSON::Syck:
    LoadFile: json_load_file
    Load:     json_load	    
    DumpFile: json_dump_file
    Dump:     json_dump	    

datetime:
  DateTime::Duration:
    year   : sub {sub () { DateTime::Duration->new(years   => 1) }}
    month  : sub {sub () { DateTime::Duration->new(months  => 1) }}
    day    : sub {sub () { DateTime::Duration->new(days    => 1) }}
    hour   : sub {sub () { DateTime::Duration->new(hours   => 1) }}
    minute : sub {sub () { DateTime::Duration->new(minutes => 1) }}
    second : sub {sub () { DateTime::Duration->new(seconds => 1) }}
    datetime_duration: sub {sub {DateTime::Duration->new(@_)}}
  Date::Parse:
    datetime_parse: sub {require Date::Manip; Date::Manip::Date_Init();sub {my ($ss,$mm,$hh,$day,$month,$year,$zone) = Date::Parse::strptime(@_); DateTime->new(year => $year + 1900, month => ++$month, day => $day, hour => $hh || 0, minute => $mm || 0, second => $ss || 0, time_zone => $Date::Manip::Zone{n2o}->{Time::Zone::tz_name($zone)})} }
    # strptime: time_parse
  DateTime:
    today  : sub {sub () { DateTime->today(@_) }}
    now    : sub {sub () { DateTime->now(@_) }}

benchmark:
  Benchmark: *

file:
  File::Find:
    fild : file_find
  File::Path: *
  File::Slurp:
    slurp     : file_slurp
    read_file : file_read
    write_file: file_write
  File::Copy:
    copy: file_copy
    move: file_move

return:
  Return::Value:
    - success
    - failure
